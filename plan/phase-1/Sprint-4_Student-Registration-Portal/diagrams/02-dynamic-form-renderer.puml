@startuml Dynamic_Form_Renderer
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_WITH_LEGEND()

title Dynamic Form Renderer - Architecture

Container_Boundary(form_renderer_system, "Form Renderer System") {
    
    ' Main Renderer
    Component(form_renderer, "FormRenderer", "Component", "Main form rendering engine")
    Component(section_renderer, "SectionRenderer", "Component", "Render form sections")
    Component(field_renderer, "FieldRenderer", "Component", "Render individual fields")
    
    ' Field Type Components
    Component(text_field, "TextField", "Component", "Single-line text input")
    Component(textarea_field, "TextareaField", "Component", "Multi-line text")
    Component(number_field, "NumberField", "Component", "Numeric input")
    Component(select_field, "SelectField", "Component", "Dropdown select")
    Component(radio_field, "RadioField", "Component", "Radio button group")
    Component(checkbox_field, "CheckboxField", "Component", "Checkbox group")
    Component(date_field, "DateField", "Component", "Date picker")
    Component(file_field, "FileField", "Component", "File upload")
    Component(address_field, "AddressField", "Component", "Address with map")
    
    ' Logic Components
    Component(conditional_logic, "ConditionalLogic", "Service", "Evaluate field conditions")
    Component(validation_engine, "ValidationEngine", "Service", "Dynamic validation")
    Component(field_mapper, "FieldMapper", "Service", "Map config to components")
    
    ' State Management
    Component(form_state, "FormState", "Context", "Current form values")
    Component(config_state, "ConfigState", "State", "Form configuration")
}

' External
ContainerDb(firestore, "Firestore", "Database")
Container(form_builder, "Form Builder", "Admin tool")

' Relationships
Rel(form_renderer, config_state, "Reads config")
Rel(form_renderer, section_renderer, "Renders sections")
Rel(section_renderer, field_renderer, "Renders fields")

Rel(field_renderer, field_mapper, "Get component type")
Rel(field_mapper, text_field, "Maps to")
Rel(field_mapper, select_field, "Maps to")
Rel(field_mapper, file_field, "Maps to")

Rel(field_renderer, conditional_logic, "Check visibility")
Rel(field_renderer, validation_engine, "Validate value")

Rel(field_renderer, form_state, "Updates values")
Rel(conditional_logic, form_state, "Reads values")

Rel(config_state, firestore, "Load from")
Rel(form_builder, firestore, "Save to")

SHOW_LEGEND()

@enduml

@startuml Form_Config_Structure

title Form Configuration Structure

package "Form Config JSON" {
    object FormConfig {
        id: "form-1"
        schoolId: "school-a"
        periodId: "period-1"
        name: "Formulir PPDB 2024"
        sections: Section[]
        documents: Document[]
    }
    
    object Section {
        id: "section-1"
        title: "Data Pribadi"
        order: 1
        fields: Field[]
    }
    
    object Field {
        id: "field-1"
        type: "text" | "select" | ...
        label: "Nama Lengkap"
        placeholder: "Masukkan nama"
        required: true
        validation: ValidationRule
        conditionalVisibility: Condition
        order: 1
    }
    
    object ValidationRule {
        min: 3
        max: 100
        pattern: "^[a-zA-Z ]+$"
        message: "Hanya huruf"
    }
    
    object Condition {
        fieldId: "field-school-type"
        operator: "=="
        value: "SMA"
    }
}

FormConfig *-- Section
Section *-- Field
Field *-- ValidationRule
Field *-- Condition

note right of Field
  **Supported Types:**
  - text
  - textarea
  - number
  - select
  - radio
  - checkbox
  - date
  - file
  - address
end note

note bottom of Condition
  **Operators:**
  - == (equals)
  - != (not equals)
  - > (greater than)
  - < (less than)
  - contains
  - in
end note

@enduml

@startuml Field_Type_Mapping

title Field Type to Component Mapping

package "Field Types" {
    class FieldType <<enumeration>> {
        TEXT
        TEXTAREA
        NUMBER
        SELECT
        RADIO
        CHECKBOX
        DATE
        FILE
        ADDRESS
    }
}

package "React Components" {
    class TextField {
        +label: string
        +value: string
        +onChange: function
        +validation: ValidationRule
        +render(): JSX
    }
    
    class SelectField {
        +label: string
        +options: Option[]
        +value: string
        +onChange: function
        +render(): JSX
    }
    
    class FileField {
        +label: string
        +accept: string[]
        +maxSize: number
        +onUpload: function
        +render(): JSX
    }
    
    class AddressField {
        +label: string
        +showMap: boolean
        +value: Address
        +onChange: function
        +render(): JSX
    }
}

package "Field Renderer" {
    class FieldRenderer {
        +config: FieldConfig
        +value: any
        +onChange: function
        +getComponent(type): Component
        +render(): JSX
    }
}

FieldType ..> FieldRenderer : maps to
FieldRenderer --> TextField : renders
FieldRenderer --> SelectField : renders
FieldRenderer --> FileField : renders
FieldRenderer --> AddressField : renders

note right of FieldRenderer
  **Rendering Logic:**
  
  switch(field.type) {
    case 'text':
      return <TextField {...props} />
    case 'select':
      return <SelectField {...props} />
    case 'file':
      return <FileField {...props} />
    // ...
  }
end note

@enduml

@startuml Conditional_Logic_Flow

title Conditional Field Logic - Evaluation

actor "Student" as student
participant "Field A" as field_a
participant "Field B\n(conditional)" as field_b
participant "Form State" as state
participant "Conditional Logic" as logic

student -> field_a: Select "SMA"
field_a -> state: Update value\nschoolType = "SMA"

state -> logic: Trigger evaluation
logic -> state: Get all field values

logic -> logic: Evaluate conditions:\nfield_b.condition =\n{fieldId: "schoolType",\noperator: "==",\nvalue: "SMA"}

logic -> logic: Check:\nstate.schoolType == "SMA"

alt Condition TRUE
    logic -> field_b: Set visible = true
    field_b -> student: Show field
else Condition FALSE
    logic -> field_b: Set visible = false
    field_b -> student: Hide field
end

note right of logic
  **Evaluation Function:**
  
  function evaluateCondition(
    condition: Condition,
    formValues: Record<string, any>
  ): boolean {
    const fieldValue = formValues[condition.fieldId]
    
    switch(condition.operator) {
      case '==':
        return fieldValue === condition.value
      case '!=':
        return fieldValue !== condition.value
      case '>':
        return fieldValue > condition.value
      case '<':
        return fieldValue < condition.value
      case 'contains':
        return fieldValue.includes(condition.value)
      default:
        return false
    }
  }
end note

@enduml

@startuml Validation_Engine

title Dynamic Validation Engine

participant "Field" as field
participant "Validation Engine" as engine
participant "Form State" as state

field -> engine: validate(field, value)

engine -> engine: Get validation rules\nfrom field config

alt Required field
    engine -> engine: Check value exists
    alt Empty
        engine -> field: Return error:\n"Field is required"
    end
end

alt Min/Max length
    engine -> engine: Check string length
    alt Invalid
        engine -> field: Return error:\n"Min 3, Max 100 chars"
    end
end

alt Pattern (regex)
    engine -> engine: Test against pattern
    alt No match
        engine -> field: Return error:\n"Invalid format"
    end
end

alt Custom validator
    engine -> engine: Run custom function
    alt Validation fails
        engine -> field: Return custom error
    end
end

alt Cross-field validation
    engine -> state: Get other field values
    engine -> engine: Compare values
    alt Invalid
        engine -> field: Return error:\n"Values don't match"
    end
end

engine -> field: Validation passed

note right of engine
  **Validation Rules:**
  
  interface ValidationRule {
    required?: boolean
    min?: number
    max?: number
    pattern?: RegExp
    custom?: (value, formValues) => boolean
    message?: string
  }
  
  **Timing:**
  - onChange: Real-time validation
  - onBlur: On field exit
  - onSubmit: Final validation
end note

@enduml
