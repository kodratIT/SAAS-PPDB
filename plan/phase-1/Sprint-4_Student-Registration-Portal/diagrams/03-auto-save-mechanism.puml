@startuml Auto_Save_Mechanism

title Auto-Save & Draft Management System

actor "Student" as student
participant "Registration Form" as form
participant "Auto-Save Hook" as hook
participant "Debounce" as debounce
participant "IndexedDB" as indexdb
participant "API" as api
database "Firestore" as db

== User Fills Form ==

student -> form: Fill field "Nama Lengkap"
form -> hook: Form value changed
hook -> debounce: Queue save (30s delay)

student -> form: Fill field "Email"
form -> hook: Form value changed
hook -> debounce: Reset timer (30s delay)

student -> form: Fill field "Phone"
form -> hook: Form value changed
hook -> debounce: Reset timer (30s delay)

== Auto-Save Triggered (after 30s idle) ==

debounce -> hook: Trigger save
hook -> hook: Collect all form data

par Save to IndexedDB (offline capability)
    hook -> indexdb: Save draft locally\n{userId, periodId, data, timestamp}
    indexdb -> hook: Saved to IndexedDB
end

par Save to Firestore (cloud backup)
    hook -> api: POST /api/drafts/save\n{userId, periodId, data}
    api -> db: Upsert draft document
    db -> api: Draft saved
    api -> hook: Save confirmed
end

hook -> form: Show "Tersimpan" indicator
form -> student: Display "Terakhir disimpan: 12:30"

== Continue Filling ==

student -> form: Fill more fields
form -> hook: Form value changed
hook -> debounce: Reset timer (30s)

note over debounce
  **Debounce Logic:**
  - Waits 30 seconds after last change
  - Resets timer on each new change
  - Prevents excessive saves
  - Reduces API calls
end note

== User Leaves & Returns ==

student -> student: Close browser

... Later ...

student -> form: Open registration page
form -> api: Check for draft
api -> db: Query drafts\nwhere userId == uid\nand periodId == period

alt Draft exists
    db -> api: Draft found
    api -> form: Draft data
    form -> student: Show "Lanjutkan pendaftaran?"
    
    student -> form: Click "Lanjutkan"
    form -> form: Load draft data\ninto form fields
    form -> student: Form restored
    
else No draft
    form -> student: Show empty form
end

== Submit Application ==

student -> form: Click "Submit"
form -> api: POST /api/applications\n{all form data}
api -> db: Create application
db -> api: Application created

api -> db: Delete draft\nwhere userId == uid\nand periodId == period
db -> api: Draft deleted

api -> indexdb: Delete local draft
indexdb -> api: Local draft deleted

api -> form: Application submitted
form -> student: Show success page

note right of api
  **Draft Document Structure:**
  
  {
    id: "draft-xyz",
    userId: "user-123",
    periodId: "period-1",
    schoolId: "school-a",
    formData: {
      step1: {...},
      step2: {...},
      step3: {...},
      currentStep: 2
    },
    lastSaved: timestamp,
    createdAt: timestamp,
    expiresAt: timestamp + 30 days
  }
end note

@enduml

@startuml Auto_Save_State_Management

title Auto-Save State Management

state "Form Editing" as editing {
    [*] --> Idle
    
    Idle --> Changed : User input
    Changed --> Debouncing : Start timer
    Debouncing --> Changed : More input (reset timer)
    Debouncing --> Saving : Timer elapsed (30s)
    
    state "Saving" as Saving {
        [*] --> SavingLocal
        SavingLocal --> SavingCloud : Local done
        SavingCloud --> [*] : Cloud done
    }
    
    Saving --> Saved : Success
    Saving --> SaveError : Failed
    
    Saved --> Idle : Continue editing
    SaveError --> Retry : Auto retry
    Retry --> Saving : Retry save
    SaveError --> Idle : Give up (after 3 retries)
}

editing --> Submitting : Submit clicked

state "Submitting" as Submitting {
    [*] --> FinalValidation
    FinalValidation --> CreateApplication
    CreateApplication --> DeleteDrafts
    DeleteDrafts --> [*]
}

Submitting --> [*] : Success
Submitting --> editing : Error (retry)

note right of Debouncing
  **Debounce Timer:**
  - 30 seconds
  - Resets on each change
  - Prevents excessive saves
end note

note right of Saving
  **Dual Storage:**
  - IndexedDB (offline)
  - Firestore (cloud)
  - Both updated simultaneously
end note

note right of SaveError
  **Retry Strategy:**
  - Max 3 retries
  - Exponential backoff
  - Falls back to local only
end note

@enduml

@startuml Draft_Resume_Flow

title Resume from Draft Flow

actor "Student" as student
participant "Registration Page" as page
participant "API" as api
database "Firestore" as db
database "IndexedDB" as indexdb

student -> page: Visit registration page

page -> page: Check authentication
page -> api: GET /api/drafts/check\n?userId=123&periodId=456

api -> db: Query drafts collection

alt Draft exists in Firestore
    db -> api: Draft found (cloud)
    api -> page: Draft available (cloud)
else No cloud draft
    page -> indexdb: Check local storage
    alt Local draft exists
        indexdb -> page: Draft found (local)
    else No draft at all
        page -> student: Show empty form
    end
end

page -> student: Show modal:\n"Anda memiliki pendaftaran\nyang belum selesai.\nLanjutkan?"

alt Student chooses "Lanjutkan"
    student -> page: Click "Ya, Lanjutkan"
    page -> api: GET /api/drafts/{draftId}
    api -> db: Get full draft data
    db -> api: Draft data
    api -> page: Return draft
    
    page -> page: Parse draft data
    page -> page: Restore form values:\n- Personal data ✓\n- Address ✓\n- Parents ✓\n- Current step: 3
    
    page -> student: Form restored,\nGo to Step 3
    
    student -> page: Continue filling
    
else Student chooses "Mulai Baru"
    student -> page: Click "Mulai Baru"
    page -> api: DELETE /api/drafts/{draftId}
    api -> db: Delete draft
    api -> page: Draft deleted
    
    page -> student: Show empty form
end

note right of page
  **Draft Priority:**
  
  1. Cloud draft (Firestore)
     - Most reliable
     - Accessible anywhere
  
  2. Local draft (IndexedDB)
     - Fallback when offline
     - Device-specific
  
  3. No draft
     - Fresh start
end note

note left of api
  **Draft Expiration:**
  
  - Drafts expire after 30 days
  - Cleaned up by Cloud Function
  - Old drafts auto-deleted
end note

@enduml

@startuml Offline_Capability

title Offline Auto-Save Capability

actor "Student" as student
participant "Form" as form
participant "Auto-Save Hook" as hook
participant "Network Detector" as network
database "IndexedDB" as indexdb
participant "API" as api
database "Firestore" as db

student -> form: Fill form fields

form -> hook: Trigger auto-save
hook -> network: Check connectivity

alt Online
    hook -> indexdb: Save to IndexedDB
    hook -> api: Save to Firestore
    api -> db: Draft saved
    hook -> form: Show "Tersimpan (cloud)"
    
else Offline
    hook -> indexdb: Save to IndexedDB only
    indexdb -> hook: Saved locally
    hook -> form: Show "Tersimpan (offline)"
    
    hook -> hook: Queue for sync\nwhen back online
end

... Student goes offline ...

student -> student: Network disconnected

form -> hook: Continue auto-save
hook -> network: Check connectivity
network -> hook: Offline

hook -> indexdb: Save to IndexedDB only
hook -> form: Show "Offline - tersimpan lokal"

... Student back online ...

student -> student: Network reconnected

network -> hook: Connection restored
hook -> hook: Trigger sync queue

loop For each queued draft
    hook -> api: Sync draft to cloud
    api -> db: Save draft
    db -> api: Saved
    api -> hook: Sync complete
end

hook -> form: Show "Semua perubahan\ntersinkron"

note right of hook
  **Offline Strategy:**
  
  1. Always save to IndexedDB first
  2. Try to save to Firestore
  3. Queue failed saves for sync
  4. Auto-sync when online
  5. Show clear offline indicator
  
  **Benefits:**
  - No data loss when offline
  - Seamless experience
  - Auto-sync on reconnect
end note

note left of indexdb
  **IndexedDB Schema:**
  
  drafts: {
    id: string (primary key)
    userId: string
    periodId: string
    formData: object
    lastSaved: timestamp
    syncStatus: 'pending' | 'synced'
  }
end note

@enduml
