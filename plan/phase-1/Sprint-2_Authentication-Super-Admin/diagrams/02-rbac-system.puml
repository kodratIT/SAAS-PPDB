@startuml RBAC_System_Diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_WITH_LEGEND()

title Role-Based Access Control (RBAC) System

Container_Boundary(rbac_system, "RBAC System") {
    
    ' Core RBAC Components
    Component(roles, "Roles", "Enum", "super_admin, school_admin, panitia, student")
    Component(permissions, "Permissions", "Map", "Define what each role can do")
    Component(rbac_middleware, "RBAC Middleware", "Middleware", "Check permissions on routes")
    Component(permission_guards, "Permission Guards", "Components", "Check permissions in UI")
    
    ' Permission System
    Component(has_permission, "hasPermission()", "Function", "Check if user has specific permission")
    Component(can_access_route, "canAccessRoute()", "Function", "Check route access")
    Component(use_permissions, "usePermissions()", "Hook", "React hook for permissions")
    
    ' Role Assignment
    Component(assign_role, "assignRole()", "Function", "Assign role to user")
    Component(check_role, "checkRole()", "Function", "Check user role")
    
    ' Audit
    Component(audit_log, "Audit Log", "Service", "Log permission checks")
}

' External Systems
Container(next_middleware, "Next.js Middleware", "Route Guard")
Container(api_routes, "API Routes", "Backend")
Container(ui_components, "UI Components", "Frontend")
ContainerDb(firestore, "Firestore", "Database")

' User Document Structure
Component(user_doc, "User Document", "Firestore", "{ role, permissions[], status }")

' Relationships
Rel(roles, permissions, "Maps to")
Rel(permissions, has_permission, "Used by")
Rel(has_permission, use_permissions, "Exposed via")

Rel(next_middleware, rbac_middleware, "Uses")
Rel(rbac_middleware, can_access_route, "Checks")
Rel(can_access_route, user_doc, "Reads role from")

Rel(api_routes, has_permission, "Checks permission")
Rel(ui_components, permission_guards, "Protected by")
Rel(permission_guards, use_permissions, "Uses")

Rel(assign_role, user_doc, "Updates")
Rel(check_role, user_doc, "Reads")

Rel(has_permission, audit_log, "Logs checks")

' Firestore connection
Rel(user_doc, firestore, "Stored in")

@enduml

@startuml RBAC_Permissions_Matrix

title RBAC Permissions Matrix

skinparam rectangleBackgroundColor<<super_admin>> #FF6B6B
skinparam rectangleBackgroundColor<<school_admin>> #4ECDC4
skinparam rectangleBackgroundColor<<panitia>> #95E1D3
skinparam rectangleBackgroundColor<<student>> #F7DC6F

package "Roles" {
    rectangle "Super Admin" as super_admin <<super_admin>>
    rectangle "School Admin" as school_admin <<school_admin>>
    rectangle "Panitia" as panitia <<panitia>>
    rectangle "Student" as student <<student>>
}

package "Permissions" {
    
    package "Schools Management" {
        rectangle "schools.create" as schools_create
        rectangle "schools.read" as schools_read
        rectangle "schools.update" as schools_update
        rectangle "schools.delete" as schools_delete
        rectangle "schools.list_all" as schools_list_all
    }
    
    package "Users Management" {
        rectangle "users.create" as users_create
        rectangle "users.read" as users_read
        rectangle "users.update" as users_update
        rectangle "users.delete" as users_delete
        rectangle "users.assign_role" as users_assign_role
    }
    
    package "PPDB Periods" {
        rectangle "periods.create" as periods_create
        rectangle "periods.read" as periods_read
        rectangle "periods.update" as periods_update
        rectangle "periods.delete" as periods_delete
    }
    
    package "Applications" {
        rectangle "applications.create" as applications_create
        rectangle "applications.read_own" as applications_read_own
        rectangle "applications.read_all" as applications_read_all
        rectangle "applications.update_own" as applications_update_own
        rectangle "applications.update_all" as applications_update_all
        rectangle "applications.delete" as applications_delete
    }
    
    package "Verification" {
        rectangle "verification.approve" as verification_approve
        rectangle "verification.reject" as verification_reject
        rectangle "verification.bulk" as verification_bulk
    }
    
    package "Payments" {
        rectangle "payments.verify" as payments_verify
        rectangle "payments.refund" as payments_refund
        rectangle "payments.reports" as payments_reports
    }
    
    package "Subscription Plans" {
        rectangle "plans.create" as plans_create
        rectangle "plans.read" as plans_read
        rectangle "plans.update" as plans_update
        rectangle "plans.delete" as plans_delete
    }
    
    package "Analytics" {
        rectangle "analytics.view_all" as analytics_view_all
        rectangle "analytics.view_school" as analytics_view_school
    }
}

' Super Admin Permissions (ALL)
super_admin --> schools_create
super_admin --> schools_read
super_admin --> schools_update
super_admin --> schools_delete
super_admin --> schools_list_all
super_admin --> users_create
super_admin --> users_read
super_admin --> users_update
super_admin --> users_delete
super_admin --> users_assign_role
super_admin --> plans_create
super_admin --> plans_read
super_admin --> plans_update
super_admin --> plans_delete
super_admin --> analytics_view_all

' School Admin Permissions
school_admin --> schools_read
school_admin --> schools_update
school_admin --> users_create
school_admin --> users_read
school_admin --> users_update
school_admin --> periods_create
school_admin --> periods_read
school_admin --> periods_update
school_admin --> periods_delete
school_admin --> applications_read_all
school_admin --> applications_update_all
school_admin --> payments_verify
school_admin --> payments_reports
school_admin --> analytics_view_school

' Panitia Permissions
panitia --> applications_read_all
panitia --> verification_approve
panitia --> verification_reject
panitia --> verification_bulk

' Student Permissions
student --> applications_create
student --> applications_read_own
student --> applications_update_own

note right of super_admin
  **Super Admin**
  - Full system access
  - Manage all schools
  - Manage subscription plans
  - View all analytics
  - Assign roles
end note

note right of school_admin
  **School Admin**
  - Manage own school
  - Create PPDB periods
  - Manage applicants
  - Verify payments
  - View school analytics
end note

note right of panitia
  **Panitia**
  - Verify documents
  - Score applications
  - Bulk operations
  - View applicants
end note

note right of student
  **Student**
  - Create application
  - View own application
  - Update before submit
  - Upload documents
end note

@enduml

@startuml RBAC_Implementation_Code

title RBAC Implementation Structure

package "lib/rbac" {
    class Permissions {
        +SUPER_ADMIN: Permission[]
        +SCHOOL_ADMIN: Permission[]
        +PANITIA: Permission[]
        +STUDENT: Permission[]
        +hasPermission(role, permission): boolean
    }
    
    class RBACMiddleware {
        +checkPermission(permission): Middleware
        +checkRole(roles): Middleware
        +requireAuth(): Middleware
    }
    
    class PermissionGuard {
        +canAccess(user, permission): boolean
        +canAccessRoute(user, route): boolean
        +getAccessibleRoutes(role): Route[]
    }
}

package "hooks" {
    class usePermissions {
        +hasPermission(permission): boolean
        +hasRole(role): boolean
        +canAccess(permission): boolean
    }
}

package "middleware" {
    class NextMiddleware {
        +middleware(request): Response
        -checkRouteAccess(path, session)
        -redirectUnauthorized(url)
    }
}

package "components/auth" {
    class PermissionBoundary {
        +permission: string
        +fallback: ReactNode
        +children: ReactNode
        +render()
    }
    
    class RoleGuard {
        +allowedRoles: string[]
        +children: ReactNode
        +render()
    }
}

Permissions --> RBACMiddleware
RBACMiddleware --> NextMiddleware
PermissionGuard --> usePermissions
PermissionBoundary --> usePermissions
RoleGuard --> usePermissions

note right of Permissions
  **permissions.ts**
  
  export const PERMISSIONS = {
    SUPER_ADMIN: [
      'schools.create',
      'schools.delete',
      'users.assign_role',
      // ... all permissions
    ],
    SCHOOL_ADMIN: [
      'schools.update',
      'periods.create',
      'applications.read_all',
      // ...
    ],
    // ...
  }
end note

note right of usePermissions
  **Usage Example**
  
  const { hasPermission, hasRole } = usePermissions()
  
  if (hasPermission('schools.create')) {
    // Show create button
  }
  
  if (hasRole('super_admin')) {
    // Show admin menu
  }
end note

note bottom of PermissionBoundary
  **Usage Example**
  
  <PermissionBoundary 
    permission="schools.create"
    fallback={<p>No access</p>}
  >
    <CreateSchoolButton />
  </PermissionBoundary>
end note

@enduml
