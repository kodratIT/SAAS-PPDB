@startuml configuration-management
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Sequence.puml

title System Configuration Management - Sprint 6

' === SUB-DIAGRAM 1: Configuration Update Flow ===
participant "Admin" as Admin
participant "Settings UI" as UI
participant "Config API" as API
participant "Firestore" as DB
participant "Cache" as Cache

Admin -> UI: Navigate to Settings
UI -> API: GET /api/admin/config
API -> DB: Get system_config document
DB --> API: Current configuration
API --> UI: Configuration data
UI --> Admin: Display settings form

== Update Configuration ==
Admin -> UI: Modify email template
Admin -> UI: Update notification settings
Admin -> UI: Click "Save Changes"

UI -> UI: Validate inputs

UI -> API: PUT /api/admin/config
note right
  {
    emailTemplates: {
      approval: "...",
      rejection: "..."
    },
    notifications: {
      email: true,
      sms: false
    },
    features: {
      autoApprove: false,
      paymentRequired: true
    }
  }
end note

API -> API: Validate configuration
API -> DB: Update system_config
DB --> API: Update success

API -> Cache: Invalidate config cache
Cache --> API: Cache cleared

API --> UI: Success response
UI --> Admin: "Settings saved successfully"

@enduml

'===============================================
' SUB-DIAGRAM 2: Configuration Categories
'===============================================
@startuml config-categories
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title System Configuration Structure

Container_Boundary(config, "System Configuration") {
  Component(general, "General Settings", "Category", "Site name, logo, timezone")
  Component(email, "Email Templates", "Category", "Approval, rejection, notification templates")
  Component(notifications, "Notifications", "Category", "Email, SMS, push settings")
  Component(payment, "Payment Settings", "Category", "Gateway, fees, refund policy")
  Component(features, "Feature Flags", "Category", "Enable/disable features")
  Component(integration, "Integrations", "Category", "API keys, webhooks")
}

Container_Boundary(storage, "Configuration Storage") {
  Component(db_config, "Firestore", "Database", "Persistent configuration")
  Component(cache, "Redis/Memory", "Cache", "Fast access")
  Component(env, "Environment", "Variables", "Secrets & keys")
}

Rel(general, db_config, "stores in")
Rel(email, db_config, "stores in")
Rel(notifications, db_config, "stores in")
Rel(payment, db_config, "stores in")
Rel(features, db_config, "stores in")

Rel(integration, env, "secrets in")
Rel(integration, db_config, "config in")

Rel(db_config, cache, "cached in")

@enduml

'===============================================
' SUB-DIAGRAM 3: Email Template Configuration
'===============================================
@startuml email-templates
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title Email Template Management

rectangle "Email Template Editor" {
  rectangle "Template List" {
    card "Approval Email" as tmpl1
    card "Rejection Email" as tmpl2
    card "Payment Confirmation" as tmpl3
    card "Registration Welcome" as tmpl4
    card "Password Reset" as tmpl5
  }
  
  rectangle "Template Editor" {
    card "Subject Line" as subject
    card "HTML Body Editor" as body
    card "Variables Available" as vars
    card "Preview Panel" as preview
  }
  
  rectangle "Template Variables" {
    card "{{studentName}}" as var1
    card "{{schoolName}}" as var2
    card "{{registrationNumber}}" as var3
    card "{{dashboardUrl}}" as var4
    card "{{verificationComment}}" as var5
  }
}

tmpl1 --> body : "Edit"
vars --> body : "Insert variable"
body --> preview : "Real-time preview"

note right of "Template Editor"
  Features:
  - Rich text editor
  - Variable insertion
  - Preview with sample data
  - Version history
  - Revert to default
end note

@enduml

'===============================================
' SUB-DIAGRAM 4: Feature Flags System
'===============================================
@startuml feature-flags
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Sequence.puml

title Feature Flags Implementation

participant "Application" as App
participant "Feature\nService" as Feature
participant "Config Cache" as Cache
participant "Firestore" as DB

App -> Feature: isFeatureEnabled('autoApprove')

Feature -> Cache: Check cache
alt Cache hit
  Cache --> Feature: Feature flag value
else Cache miss
  Feature -> DB: Get feature_flags
  DB --> Feature: Flags configuration
  Feature -> Cache: Store in cache (TTL: 5min)
end

Feature --> App: Boolean (true/false)

alt autoApprove = true
  App -> App: Auto-approve qualifying applications
else autoApprove = false
  App -> App: Require manual verification
end

note right of Feature
  Feature flags allow:
  - A/B testing
  - Gradual rollouts
  - Quick feature toggle
  - No code deployment needed
end note

@enduml

'===============================================
' SUB-DIAGRAM 5: Configuration Schema
'===============================================
@startuml config-schema
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title Firestore Configuration Document

entity "system_config" as config {
  **id**: "default"
  --
  **general**: {
    siteName: string
    siteUrl: string
    timezone: string
    locale: string
  }
  --
  **emailTemplates**: {
    approval: {subject, body}
    rejection: {subject, body}
    payment: {subject, body}
    welcome: {subject, body}
  }
  --
  **notifications**: {
    email: boolean
    sms: boolean
    push: boolean
    channels: array
  }
  --
  **payment**: {
    gateway: string
    fees: object
    refundPolicy: string
  }
  --
  **features**: {
    autoApprove: boolean
    paymentRequired: boolean
    documentUpload: boolean
    multiLanguage: boolean
  }
  --
  **integration**: {
    midtransClientKey: string
    googleMapsKey: string
    sentryDSN: string
  }
  --
  updatedAt: timestamp
  updatedBy: string
}

note right of config
  Single document pattern
  Easy to query
  Cached for performance
  Version tracked
  Audit logged
end note

@enduml
