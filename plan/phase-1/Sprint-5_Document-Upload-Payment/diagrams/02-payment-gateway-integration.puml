@startuml payment-gateway-integration
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Sequence.puml

title Payment Gateway Integration - Midtrans

' === SUB-DIAGRAM 1: Complete Payment Flow ===
participant "Student" as Student
participant "Payment Page" as Page
participant "API:\nCreate Payment" as API
participant "Midtrans SDK" as Midtrans
participant "Midtrans Server" as MidtransServer
participant "Firestore" as DB

Student -> Page: Click "Bayar Sekarang"
Page -> API: POST /api/payment/create\n{applicationId}

API -> DB: Get application data
DB --> API: Application details

API -> DB: Get period fees
DB --> API: Registration fee amount

API -> API: Generate orderId:\nPPDB-{id}-{timestamp}

API -> Midtrans: createPaymentToken()
Midtrans -> MidtransServer: Create transaction
MidtransServer --> Midtrans: Transaction token

Midtrans --> API: Payment token

API -> DB: Save payment record\n{orderId, token, status: pending}
DB --> API: Payment saved

API --> Page: {token, orderId}

Page -> Page: Load Midtrans Snap.js
Page -> Page: snap.pay(token)

Page --> Student: Show payment modal\n(VA, E-wallet, Card)

Student -> MidtransServer: Select method & pay

alt Payment Success
  MidtransServer -> API: Webhook: success
  API -> DB: Update payment status
  API -> DB: Update application status
  MidtransServer --> Student: Payment success page
else Payment Failed
  MidtransServer --> Student: Payment failed page
end

@enduml

'===============================================
' SUB-DIAGRAM 2: Webhook Processing
'===============================================
@startuml webhook-processing
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Sequence.puml

title Payment Webhook Processing

participant "Midtrans" as Midtrans
participant "Webhook\nEndpoint" as Webhook
participant "Signature\nValidator" as Validator
participant "Firestore" as DB
participant "Email\nService" as Email

Midtrans -> Webhook: POST /api/payment/webhook\n{notification}

Webhook -> Validator: Verify signature
Validator -> Validator: SHA512 hash:\norderId+statusCode+\namount+serverKey

alt Invalid signature
  Validator --> Webhook: Invalid
  Webhook --> Midtrans: 403 Forbidden
  return
end

Validator --> Webhook: Valid signature

Webhook -> DB: Find payment by orderId
DB --> Webhook: Payment record

Webhook -> Webhook: Map transaction_status
note right
  capture/settlement -> success
  deny/cancel/expire -> failed
  pending -> pending
end note

Webhook -> DB: Update payment status
Webhook -> DB: Save gateway response

alt Status = success
  Webhook -> DB: Update application.status = "paid"
  Webhook -> DB: Set payment.paidAt
  Webhook -> Email: Send payment confirmation
end

Webhook --> Midtrans: 200 OK

@enduml

'===============================================
' SUB-DIAGRAM 3: Payment Methods Support
'===============================================
@startuml payment-methods
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title Payment Methods Architecture

Container_Boundary(frontend, "Frontend") {
  Component(page, "Payment Page", "React", "Select payment method")
  Component(snap, "Midtrans Snap", "Widget", "Payment modal")
}

Container_Boundary(backend, "Backend API") {
  Component(create, "Create Payment", "API Route", "Generate token")
  Component(webhook, "Webhook Handler", "API Route", "Process notification")
}

Container_Boundary(midtrans, "Midtrans Gateway") {
  Component(va, "Virtual Account", "Method", "BCA, BNI, BRI, Mandiri")
  Component(ewallet, "E-Wallet", "Method", "Gopay, OVO, ShopeePay")
  Component(card, "Credit Card", "Method", "Visa, Mastercard")
  Component(retail, "Retail", "Method", "Alfamart, Indomaret")
}

Container(db, "Firestore", "Database", "Payment records")

Rel(page, create, "Request token")
Rel(create, db, "Save payment")
Rel(page, snap, "Open with token")
Rel(snap, va, "Choose method")
Rel(snap, ewallet, "Choose method")
Rel(snap, card, "Choose method")
Rel(snap, retail, "Choose method")
Rel(va, webhook, "Notify status")
Rel(ewallet, webhook, "Notify status")
Rel(card, webhook, "Notify status")
Rel(retail, webhook, "Notify status")
Rel(webhook, db, "Update status")

@enduml
