rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==================== HELPER FUNCTIONS ====================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Get user role from custom claims
    function getUserRole() {
      return request.auth.token.role;
    }
    
    // Get user's school ID from custom claims
    function getUserSchoolId() {
      return request.auth.token.schoolId;
    }
    
    // Check if user is super admin
    function isSuperAdmin() {
      return isAuthenticated() && getUserRole() == 'super_admin';
    }
    
    // Check if user is school admin
    function isSchoolAdmin() {
      return isAuthenticated() && getUserRole() == 'school_admin';
    }
    
    // Check if user is panitia
    function isPanitia() {
      return isAuthenticated() && getUserRole() == 'panitia';
    }
    
    // Check if user is student
    function isStudent() {
      return isAuthenticated() && getUserRole() == 'student';
    }
    
    // Check if user belongs to the school
    function belongsToSchool(schoolId) {
      return isAuthenticated() && getUserSchoolId() == schoolId;
    }
    
    // Check if user is owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if school admin or panitia of the school
    function isSchoolAdminOrPanitia(schoolId) {
      return (isSchoolAdmin() || isPanitia()) && belongsToSchool(schoolId);
    }
    
    // ==================== SCHOOLS COLLECTION ====================
    
    match /schools/{schoolId} {
      // Super admin: full access
      // School admin: read own school, update own school
      // Panitia: read own school
      // Student: read own school (for registration)
      
      allow read: if isSuperAdmin() 
        || belongsToSchool(schoolId)
        || isStudent(); // Students can read school info for registration
      
      allow create: if isSuperAdmin();
      
      allow update: if isSuperAdmin() 
        || (isSchoolAdmin() && belongsToSchool(schoolId));
      
      allow delete: if isSuperAdmin();
    }
    
    // ==================== USERS COLLECTION ====================
    
    match /users/{userId} {
      // Super admin: full access
      // School admin: read/write users in their school
      // User: read/update own profile
      
      allow read: if isSuperAdmin()
        || isOwner(userId)
        || (isSchoolAdminOrPanitia(resource.data.schoolId));
      
      allow create: if isAuthenticated(); // Any authenticated user can create their profile
      
      allow update: if isSuperAdmin()
        || isOwner(userId)
        || (isSchoolAdmin() && belongsToSchool(resource.data.schoolId));
      
      allow delete: if isSuperAdmin()
        || (isSchoolAdmin() && belongsToSchool(resource.data.schoolId));
    }
    
    // ==================== SUBSCRIPTION PLANS ====================
    
    match /subscription_plans/{planId} {
      // Super admin: full access
      // Everyone: read (for pricing page)
      
      allow read: if true; // Public read for pricing
      allow write: if isSuperAdmin();
    }
    
    // ==================== PPDB PERIODS ====================
    
    match /ppdb_periods/{periodId} {
      // Super admin: full access
      // School admin: full access to own school periods
      // Panitia: read own school periods
      // Student: read active periods for registration
      
      allow read: if isSuperAdmin()
        || belongsToSchool(resource.data.schoolId)
        || isStudent(); // Students can read to check active periods
      
      allow create: if isSuperAdmin()
        || (isSchoolAdmin() && belongsToSchool(request.resource.data.schoolId));
      
      allow update: if isSuperAdmin()
        || (isSchoolAdmin() && belongsToSchool(resource.data.schoolId));
      
      allow delete: if isSuperAdmin()
        || (isSchoolAdmin() && belongsToSchool(resource.data.schoolId));
    }
    
    // ==================== FORM CONFIGURATIONS ====================
    
    match /form_configs/{formId} {
      // Super admin: full access
      // School admin: full access to own school forms
      // Panitia: read own school forms
      // Student: read forms for registration
      
      allow read: if isSuperAdmin()
        || belongsToSchool(resource.data.schoolId)
        || isStudent();
      
      allow create: if isSuperAdmin()
        || (isSchoolAdmin() && belongsToSchool(request.resource.data.schoolId));
      
      allow update: if isSuperAdmin()
        || (isSchoolAdmin() && belongsToSchool(resource.data.schoolId));
      
      allow delete: if isSuperAdmin()
        || (isSchoolAdmin() && belongsToSchool(resource.data.schoolId));
    }
    
    // ==================== APPLICATIONS ====================
    
    match /applications/{applicationId} {
      // Super admin: full access
      // School admin: full access to own school applications
      // Panitia: read/update own school applications (for verification)
      // Student: read/update own applications
      
      allow read: if isSuperAdmin()
        || belongsToSchool(resource.data.schoolId)
        || isOwner(resource.data.userId);
      
      allow create: if isStudent() 
        && request.resource.data.userId == request.auth.uid;
      
      allow update: if isSuperAdmin()
        || (isSchoolAdminOrPanitia(resource.data.schoolId))
        || (isOwner(resource.data.userId) 
            && resource.data.status in ['draft', 'submitted']); // Students can only edit draft/submitted
      
      allow delete: if isSuperAdmin()
        || (isSchoolAdmin() && belongsToSchool(resource.data.schoolId));
    }
    
    // ==================== PAYMENTS ====================
    
    match /payments/{paymentId} {
      // Super admin: full access
      // School admin: read own school payments
      // Student: read/create own payments
      
      allow read: if isSuperAdmin()
        || belongsToSchool(resource.data.schoolId)
        || isOwner(resource.data.userId);
      
      allow create: if isStudent() 
        && request.resource.data.userId == request.auth.uid;
      
      allow update: if isSuperAdmin()
        || (isSchoolAdmin() && belongsToSchool(resource.data.schoolId));
      
      allow delete: if isSuperAdmin();
    }
    
    // ==================== NOTIFICATIONS ====================
    
    match /notifications/{notificationId} {
      // Users can read their own notifications
      // System can create notifications
      
      allow read: if isAuthenticated() 
        && request.auth.uid == resource.data.userId;
      
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated() 
        && request.auth.uid == resource.data.userId;
      
      allow delete: if isAuthenticated() 
        && request.auth.uid == resource.data.userId;
    }
    
    // ==================== AUDIT LOGS ====================
    
    match /audit_logs/{logId} {
      // Super admin: read only
      // System: create only
      
      allow read: if isSuperAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if false; // Immutable
    }
    
    // ==================== REPORTS ====================
    
    match /reports/{reportId} {
      // Super admin: full access
      // School admin: access own school reports
      
      allow read: if isSuperAdmin()
        || (isSchoolAdmin() && belongsToSchool(resource.data.schoolId));
      
      allow create: if isSuperAdmin()
        || isSchoolAdmin();
      
      allow update, delete: if isSuperAdmin();
    }
    
    // ==================== DEFAULT DENY ====================
    
    // Deny all other accesses
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
